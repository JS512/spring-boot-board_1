<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.dao.MemberDao">
	<insert id="addMember" parameterType="map">
		INSERT INTO `member`
		SET regDate = NOW(),
		loginId = #{loginId},
		loginPw = #{loginPw},
		name = #{name},
		email = #{email},
		authKey = #{authKey}
	</insert>
	
	<select id="doubleCheckEmail" parameterType="map" resultType="Integer">
		SELECT COUNT(id) FROM `member`
		WHERE email = #{email}
	</select>
	
	<select id="doubleCheckLoginId" parameterType="map" resultType="Integer">
		SELECT COUNT(id) FROM `member`
		WHERE loginId = #{loginId}
	</select>
	
	<select id="getOneMemberByAuthKeyEmail" parameterType="map" resultType="Integer">
		SELECT COUNT(*) FROM `member`
		WHERE email = #{email} AND authKey = #{authKey}
	</select>
	
	<update id="memberEmailAuth" parameterType="map">
		UPDATE `member`
		SET emailAuthStatus = TRUE
		WHERE email = #{email} AND authKey = #{authKey}
	</update>
	
	<select id="getOneMemberByLoginIdPw" parameterType="map" resultMap="member">
		SELECT * FROM `member`
		WHERE loginId = #{loginId} AND loginPw = #{loginPw}
	</select>
	
	<select id="getOneMemberById" parameterType="Integer" resultMap="member">
		SELECT * FROM `member`
		WHERE id = #{loginedMemberId}
	</select>
	
	<delete id="deleteOneMember" parameterType="Integer">
		DELETE FROM `member`
		WHERE id = #{loginedMemberId}
	</delete>
	
	<select id="findLoginId" parameterType="map" resultType="string">
		SELECT loginId FROM `member`
		WHERE name = #{name} AND email = #{email}
	</select>
	
	<select id="findLoginPw" parameterType="map" resultType="string">
		SELECT email FROM `member`
		WHERE loginId = #{loginId} AND email = #{email}
	</select>
	
	<update id="changeTempPw" parameterType="map">
		UPDATE `member`
		SET loginPw = #{tempPw}
		WHERE loginId = #{loginId} AND email = #{email} 
	</update>
	
	<select id="getOneMemberByIdPw" parameterType="map" resultType="member">
		SELECT * FROM `member`
		WHERE id = #{loginedMemberId} AND loginPw = #{origin_loginPw}
	</select>
	
	<update id="changeLoginPw" parameterType="map">
		UPDATE `member`
		SET loginPw = #{loginPw}
		WHERE id = #{loginedMemberId} AND loginPw = #{origin_loginPw}
	</update>
	
	<select id="getMemberRole" parameterType="Integer" resultType="string">
		SELECT attrValue FROM memberAttr
		WHERE memberId = #{loginedMemberId} AND attrName= 'ROLE'
	</select>
	
	<select id="getAllMembers" resultMap="member">
		SELECT * FROM `member`
		WHERE id != #{loginedMemberId}
	</select>
	
	<insert id="addLetter" parameterType="map">
		INSERT INTO `letter`
		SET regDate = NOW(),
		fromMemberId = #{loginedMemberId},
		toMemberId = #{toId},
		body = #{body}
	</insert>
	
	<select id="getAllLetters" parameterType="map" resultMap="letter">
		SELECT L.*, IFNULL(M.loginId ,'존재하지 않는 사용자') AS writer FROM
		`letter` AS L
		LEFT OUTER JOIN `member` AS M
		ON M.id = L.fromMemberId 
		WHERE toMemberId = #{loginedMemberId}
		LIMIT #{startNum}, #{perPageNum}
	</select>
	
	<select id="getTotalLetterCount" parameterType="map" resultType="Integer">
		SELECT COUNT(*) FROM letter
		WHERE toMemberId = #{loginedMemberId}
	</select>
	
	<delete id="deleteOneLetterById" parameterType="Integer">
		DELETE FROM letter
		WHERE id = #{id}
	</delete>
	
	<select id="getOneLetterById" parameterType="Integer" resultMap="letter">
		SELECT * FROM letter
		WHERE id = #{id}
	</select>
	
	<insert id="addReport" parameterType="map">
		INSERT INTO report
		SET regDate = NOW(),
		relId = #{relId},
		relType = #{relType},
		`body` = #{body},
		memberId = #{loginedMemberId}
	</insert>
	
	<select id="getAllReports" parameterType="map" resultMap="report">
		SELECT R.*, A.id AS articleId, A.boardId, AR.articleId AS AR_articleId , AR.boardId AS AR_boardId, IFNULL(M.loginId, '존재하지 않는 사용자') AS writer
		FROM report AS R
		LEFT OUTER JOIN article AS A
		ON R.relType = 'article' AND R.relId = A.id
		LEFT OUTER JOIN articleReply AS AR
		ON R.relType = 'reply' AND R.relId = AR.id
		LEFT OUTER JOIN `member` AS M
		ON M.id = R.memberId
		ORDER BY R.id DESC
		LIMIT #{startNum}, #{perPageNum}
	</select>
	
	<select id="getTotalReportCount" parameterType="map" resultType="Integer">
		SELECT COUNT(*) FROM report		
	</select>
	
	<resultMap id="letter" type="com.example.demo.dto.Letter">
		<id property="id" column="id"/>
		<id property="regDate" column="regDate"/>
		<id property="fromMemberId" column="fromMemberId"/>
		<id property="toMemberId" column="toMemberId"/>
		<id property="body" column="body"/>
		<association property="extra" javaType="map">
			<id property="writer" column="writer"></id>
		</association>		
	</resultMap>
	
	<resultMap id="member" type="com.example.demo.dto.Member">
		<id property="id" column="id"/>
		<id property="regDate" column="regDate"/>
		<id property="loginId" column="loginId"/>
		<id property="name" column="name"/>
		<id property="email" column="email"/>
		<id property="authKey" column="authKey"/>
		<id property="emailAuthStatus" column="emailAuthStatus"/>
	</resultMap>
	
	<resultMap id="report" type="com.example.demo.dto.Report">
		<id property="id" column="id"/>
		<id property="regDate" column="regDate"/>
		<id property="relId" column="relId"/>
		<id property="relType" column="relType"/>
		<id property="memberId" column="memberId"/>
		<id property="body" column="body"/>
		<association property="extra" javaType="map">
			<id property="articleId" column="articleId"/>
			<id property="boardId" column="boardId"/>
			<id property="articleId" column="AR_articleId"/>
			<id property="boardId" column="AR_boardId"/>
			<id property="writer" column="writer"/>
		</association>		
	</resultMap>
</mapper>